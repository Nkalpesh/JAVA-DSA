public class Ceiling {
    public static void main(String[] args) {
        int [] arr = {2, 3, 5, 9, 14, 16, 18};
        int target = 15;
        int ans = ceiling(arr, target);
        System.out.println(ans);

    }
    static int ceiling(int[] arr, int target ) {
        if (target > arr[arr.length -1 ]) {
            return -1;
        }
        int start = 0;
        int end  = arr.length-1;

        while(start <= end){
            int mid = start + (end - start)/2;
            if (target < arr[mid]) {
                end  = mid - 1;
            }else if ( target > arr[mid]){
                start = mid + 1;
            }else {
                return mid;
            }
        }
        //return start; // if you give the array of something like this
        return arr[start]; // like this, they give you value
    }
}
// find the starting and ending position of a given target value
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] ans = {-1, -1}; // Corrected from 'snd'
        ans[0] = search(nums, target, true);
        if (ans[0] != -1) {
            ans[1] = search(nums, target, false);
        }
        return ans;
    }

    int search(int[] nums, int target, boolean findStartIndex) {
        int ans = -1;
        int start = 0;
        int end = nums.length - 1;

        while (start <= end) {
            int mid = start + (end - start) / 2;

            if (target < nums[mid]) {
                end = mid - 1;
            } else if (target > nums[mid]) {
                start = mid + 1;
            } else {
                ans = mid;
                if (findStartIndex) {
                    end = mid - 1; // Move left to find start index
                } else {
                    start = mid + 1; // Move right to find end index
                }
            }
        }

        return ans;
    }
}


//leetcode Q_no. 852 Peak Index In Mountain

public class PeakIndexInMountainArray {
    public static void main(String[] args) {
        int [] arr = {2, 4, 7, 9, 6, 3, 1};
        int ans = peakIndexInMountainArray(arr);
        System.out.println(ans);

    }



// https://leetcode.com/problems/peak-index-in-a-mountain-array/
// https://leetcode.com/problems/find-peak-element/
static int peakIndexInMountainArray(int[] arr) {
    int start = 0;
    int end = arr.length - 1;

    while (start < end) {
        int mid = start + (end - start) / 2;
        if (arr[mid] > arr[mid+1]) {
            // you are in dec part of array
            // this may be the ans, but look at left
            // this is why end != mid - 1
            end = mid;
        } else {
            // you are in asc part of array
            start = mid + 1; // because we know that mid+1 element > mid element
        }
    }
    // in the end, start == end and pointing to the largest number because of the 2 checks above
    // start and end are always trying to find max element in the above 2 checks
    // hence, when they are pointing to just one element, that is the max one because that is what the checks say
    // more elaboration: at every point of time for start and end, they have the best possible answer till that time
    // and if we are saying that only one item is remaining, hence cuz of above line that is the best possible ans
    return arr[start]; // or return end as both are =
}
}
