public class Ceiling {
    public static void main(String[] args) {
        int [] arr = {2, 3, 5, 9, 14, 16, 18};
        int target = 15;
        int ans = ceiling(arr, target);
        System.out.println(ans);

    }
    static int ceiling(int[] arr, int target ) {
        if (target > arr[arr.length -1 ]) {
            return -1;
        }
        int start = 0;
        int end  = arr.length-1;

        while(start <= end){
            int mid = start + (end - start)/2;
            if (target < arr[mid]) {
                end  = mid - 1;
            }else if ( target > arr[mid]){
                start = mid + 1;
            }else {
                return mid;
            }
        }
        //return start; // if you give the array of something like this
        return arr[start]; // like this, they give you value
    }
}
// find the starting and ending position of a given target value
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] ans = {-1, -1}; // Corrected from 'snd'
        ans[0] = search(nums, target, true);
        if (ans[0] != -1) {
            ans[1] = search(nums, target, false);
        }
        return ans;
    }

    int search(int[] nums, int target, boolean findStartIndex) {
        int ans = -1;
        int start = 0;
        int end = nums.length - 1;

        while (start <= end) {
            int mid = start + (end - start) / 2;

            if (target < nums[mid]) {
                end = mid - 1;
            } else if (target > nums[mid]) {
                start = mid + 1;
            } else {
                ans = mid;
                if (findStartIndex) {
                    end = mid - 1; // Move left to find start index
                } else {
                    start = mid + 1; // Move right to find end index
                }
            }
        }

        return ans;
    }
}

